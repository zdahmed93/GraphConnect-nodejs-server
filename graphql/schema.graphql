type Post {
        id:ID!
        body: String!
        createdAt: String!
        username: String!
        comments: [Comment!]!
        likes: [Like!]!
    }

type User {
    id: ID!
    firstName: String!
    lastName: String!
    birthDate: String!
    username: String!
    email: String!
    createdAt: String!
}

type Comment {
    id: ID!
    body: String!
    username: String!
    createdAt: String!
}

type Like {
    id: ID!
    username: String!
    createdAt: String!
}

type AuthPayload {
    token: String
    user: User
}

input RegisterPayload {
    firstName: String!
    lastName: String!
    birthDate: String
    username: String!
    email: String!
    password: String!
}

input LoginPayload {
    usernameOrEmail: String!
    password: String!
}

type Query {
        posts: [Post!]!
        post(id: ID!): Post
    }

type Mutation {
    register(data: RegisterPayload!): AuthPayload
    login(data: LoginPayload!): AuthPayload
    createPost(body: String!): Post
    deletePost(id: ID!): String
    createComment(postId: ID!, body: String): Post!
    deleteComment(postId: ID!, commentId: ID!): Post!
    toggleLikePost(postId: ID!): Post!
}

type Subscription {
    newPost: Post!
}